#r "paket:
nuget Fake.Core.Environment 5.3.0
nuget Fake.Core.Process 5.3.0
nuget Fake.DotNet.Cli 5.3.0
nuget Fake.DotNet.NuGet 5.3.0
nuget Fake.IO.FileSystem 5.3.0
nuget coveralls.io >= 1.4.2
nuget FSharpLint.Core prerelease
nuget NUnit >= 3.9.0
nuget YamlDotNet >= 4.3.0 //"

open System
open System.IO
open System.Xml
open System.Xml.Linq

open Fake.DotNet
open Fake.DotNet.NuGet.Restore
open Fake.IO

open Microsoft.Win32

// Really bootstrap
let dotnetPath = "dotnet" |> Fake.Core.Process.tryFindFileOnPath
let dotnetOptions (o:DotNet.Options) = match dotnetPath with
                                       | Some f -> {o with DotNetCliPath = f}
                                       | None -> o

DotNet.restore (fun o -> { o with
                            Packages = ["./packages"]
                            Common = dotnetOptions o.Common}) "./Build/dotnet-nuget.fsproj"

// Clear any stale AltCover from package cache if present in packages.config
let xml = XDocument.Load "./MCS/packages.config"
xml.Descendants(XName.Get("package"))
|> Seq.map(fun package -> (package.Attribute(XName.Get("id")).Value, 
                           package.Attribute(XName.Get("version")).Value))
|> Seq.filter (fun (i, _) -> i = "altcover")                         
|> Seq.iter (fun (i, v) -> printfn "Found %s version %s" i v
                           let here = Path.Combine(Directory.GetCurrentDirectory(), "packages")
                           Directory.GetDirectories(here, i + ".*")
                           |> Seq.filter (fun n -> Path.GetFileName n <> (i + "." + v))
                           |> Seq.iter(fun n-> printfn "deleting %s" n
                                               Directory.Delete(n, true)))                           

// Restore the NuGet packages used by the build and the Framework version
RestoreMSSolutionPackages id "./AltCover.sln"
try
  Shell.cd "./Demo/Service"
  RestoreMSSolutionPackages id "./AltCover.Test.Service.sln"
finally
  Shell.cd "../.."

let build = """// generated by dotnet fake run .\Build\setup.fsx
#r "paket:
nuget Fake.Core.Target 5.3.0
nuget Fake.Core.Environment 5.3.0
nuget Fake.Core.Process 5.3.0
nuget Fake.DotNet.AssemblyInfoFile 5.3.0
nuget Fake.DotNet.Cli 5.3.0
nuget Fake.DotNet.MSBuild 5.3.0
nuget Fake.DotNet.NuGet 5.3.0
nuget Fake.DotNet.Testing.NUnit 5.3.0
nuget Fake.DotNet.Testing.OpenCover 5.3.0
nuget Fake.DotNet.Testing.XUnit2 5.3.0
nuget Fake.IO.FileSystem 5.3.0
nuget Fake.Testing.ReportGenerator 5.3.0
nuget coveralls.io >= 1.4.2
nuget FSharpLint.Core prerelease
nuget Markdown >= 2.2.1
nuget NUnit >= 3.9.0
nuget YamlDotNet >= 4.3.0 //"

#r "System.IO.Compression.FileSystem.dll"
#r "System.Xml"
#r "System.Xml.Linq"

#load "actions.fsx"
#load "targets.fsx"
#nowarn "988"
do
  ()
"""

File.WriteAllText("./Build/build.fsx", build)